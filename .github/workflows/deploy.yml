name: Deploy to Digital Ocean

on:
  push:
    branches: [main, staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 1200

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file
        run: |
          cat > .env << 'EOL'
          ${{ secrets.APP_ENV }}
          EOL

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: registry.digitalocean.com/${{ secrets.DIGITALOCEAN_REGISTRY_NAME }}/infina-pfa-be:${{ github.ref == 'refs/heads/main' && 'latest' || 'staging' }}
          cache-from: type=registry,ref=registry.digitalocean.com/${{ secrets.DIGITALOCEAN_REGISTRY_NAME }}/infina-pfa-be:buildcache
          cache-to: type=registry,ref=registry.digitalocean.com/${{ secrets.DIGITALOCEAN_REGISTRY_NAME }}/infina-pfa-be:buildcache,mode=max

      - name: Deploy to Digital Ocean Droplet
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            # Install Docker using Digital Ocean's recommended method
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker using official script..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
              sudo systemctl enable docker
              sudo systemctl start docker
            fi

            # Install Docker Compose
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
              mkdir -p $DOCKER_CONFIG/cli-plugins
              curl -SL https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
              chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
              sudo ln -sf $DOCKER_CONFIG/cli-plugins/docker-compose /usr/local/bin/docker-compose
            fi

            # Install doctl
            if ! command -v doctl &> /dev/null; then
              echo "Installing doctl..."
              cd ~
              curl -sL https://github.com/digitalocean/doctl/releases/download/v1.101.0/doctl-1.101.0-linux-amd64.tar.gz | tar -xzv
              sudo mv ~/doctl /usr/local/bin
              
              # Configure doctl with API token
              echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | doctl auth init --access-token
            fi

            # Create deployment directory if it doesn't exist
            sudo mkdir -p /opt/infina-pfa-be/${{ github.environment }}
            sudo chown -R $(whoami):$(whoami) /opt/infina-pfa-be
            cd /opt/infina-pfa-be/${{ github.environment }}

            # Create or update docker-compose.yml
            cat > docker-compose.yml << 'EOL'
            version: '3.8'

            services:
              api:
                image: registry.digitalocean.com/${{ secrets.DIGITALOCEAN_REGISTRY_NAME }}/infina-pfa-be:${{ github.ref == 'refs/heads/main' && 'latest' || 'staging' }}
                ports:
                  - '3000:3000'
                env_file:
                  - .env
                restart: unless-stopped

            volumes:
              postgres_data:
            EOL

            # Create .env file from secrets
            cat > .env << 'EOL'
            ${{ secrets.APP_ENV }}
            EOL

            # Login to DO Container Registry
            echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | doctl auth init --access-token
            doctl registry login --expiry-seconds 3600

            # Pull the latest image
            docker-compose pull

            # Restart services
            docker-compose down
            docker-compose up -d

            # Clean up
            docker system prune -af
